{
	"info": {
		"_postman_id": "91f8a048-e7ef-4c19-ab11-ef073062b843",
		"name": "Author's api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29652725"
	},
	"item": [
		{
			"name": "https://fakerestapi.azurewebsites.net/api/v1/Authors",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomStringUpper(length) {\r",
							"  var result           = '';\r",
							"  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
							"  var charactersLength = characters.length;\r",
							"  for ( var i = 0; i < length; i++ ) {\r",
							"     result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"  }\r",
							"  return result;\r",
							"}\r",
							"\r",
							"function getRandomStringLower(length) {\r",
							"  var result           = '';\r",
							"  var characters       = 'abcdefghijklmnopqrstuvwxyz';\r",
							"  var charactersLength = characters.length;\r",
							"  for ( var i = 0; i < length; i++ ) {\r",
							"     result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"  }\r",
							"  return result;\r",
							"}\r",
							"\r",
							"function getRandomMonth() {\r",
							"  var month = Math.floor(Math.random() * 11) + 1;\r",
							"  return month < 10 ? '0' + month : '' + month;\r",
							"}\r",
							"\r",
							"function getRandomNumberString(length) {\r",
							"        var result = '';\r",
							"        var characters = '0123456789';\r",
							"        var charactersLength = characters.length;\r",
							"        for (var i = 0; i < length; i++) {\r",
							"          result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"        }\r",
							"        return result;\r",
							"}\r",
							"\r",
							"var randomString = getRandomStringUpper(1) + getRandomStringLower(5);\r",
							"var first_name = `Test${randomString}`;\r",
							"var last_name = `${randomString}`;\r",
							"var birthday = \"1980\" + \"-\" + getRandomMonth() + \"-\" + getRandomMonth() +  \"T00:00:00\";\r",
							"var password = `${randomString}${getRandomNumberString(3)}`;\r",
							"// var password = `Password1`;\r",
							"var mobile = `07968${getRandomNumberString(6)}`;\r",
							"\r",
							"console.log(`first_name = ${first_name}`);\r",
							"console.log(`last_name = ${last_name}`);\r",
							"// console.log(`password = ${password}`);\r",
							"// console.log(`mobile = ${mobile}`);\r",
							"\r",
							"// pm.environment.set(\"email\", username + \"@me.com\");\r",
							"// pm.environment.set(\"birthday\", birthday);\r",
							"// pm.environment.set(\"username\", username);\r",
							"// pm.environment.set(\"mobile\", mobile);\r",
							"// pm.environment.set(\"password\", password);\r",
							"\r",
							"\r",
							"\r",
							"pm.environment.set(\"first_name\", first_name);\r",
							"pm.environment.set(\"last_name\", last_name);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//declaring the body as a variable\r",
							"var body = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    hasResponse = body.length > 0;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"\r",
							"// // Body response test\r",
							"pm.test(\"Expected status message is returned\", ()=>{\r",
							"    pm.expect(body.id).to.be.a(\"number\");\r",
							"    pm.expect(body.firstName).to.be.a(\"string\");\r",
							"    pm.expect(body.firstName).to.contains('Test')\r",
							"});\r",
							"\r",
							"// console.log(body)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 1,\r\n  \"firstName\": \"{{first_name}}\",\r\n  \"lastName\": \"{{last_name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/Authors",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://fakerestapi.azurewebsites.net/api/v1/Authors/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//declaring the body as a variable\r",
							"var body = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    hasResponse = body.length > 0;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"\r",
							"// // Body response test\r",
							"pm.test(\"Expected status message is returned\", ()=>{\r",
							"    pm.expect(body.id).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"// console.log(body)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 2,\r\n  \"idBook\": 2,\r\n  \"firstName\": \"new\",\r\n  \"lastName\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/Authors/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://fakerestapi.azurewebsites.net/api/v1/Authors/authors/books/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"\r",
							"pm.test(\"Each author has id, idBook, firstName, and lastName properties\", function () {\r",
							"    var authors = pm.response.json();\r",
							"    authors.forEach(function(author) {\r",
							"        pm.expect(author).to.have.property('id');\r",
							"        pm.expect(author).to.have.property('idBook');\r",
							"        pm.expect(author).to.have.property('firstName');\r",
							"        pm.expect(author).to.have.property('lastName');\r",
							"    });\r",
							"});\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each author's id should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(author) {\r",
							"        pm.expect(author.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each author's idBook should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(author) {\r",
							"        pm.expect(author.idBook).to.be.a('number').and.to.satisfy((val) => val >= 0, \"idBook should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each author's firstName should be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(author) {\r",
							"        pm.expect(author.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each author's lastName should be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(author) {\r",
							"        pm.expect(author.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last Name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains at least one author entry\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/Authors/authors/books/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"authors",
						"books",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "first_name",
			"value": ""
		},
		{
			"key": "last_name",
			"value": ""
		}
	]
}